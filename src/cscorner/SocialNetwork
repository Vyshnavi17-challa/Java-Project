package cscorner;

import java.util.*;

public class SocialNetwork {

    private Map<String, List<String>> graph;

    public SocialNetwork() {
        graph = new HashMap<>();
    }

    // Add a connection (bidirectional)
    public void addConnection(String person1, String person2) {
        graph.computeIfAbsent(person1, k -> new ArrayList<>()).add(person2);
        graph.computeIfAbsent(person2, k -> new ArrayList<>()).add(person1);
    }

    // Recursive DFS
    public List<String> findSocialCircle(String person) {
        Set<String> visited = new HashSet<>();
        List<String> result = new ArrayList<>();
        dfs(person, visited, result);
        return result;
    }

    private void dfs(String person, Set<String> visited, List<String> result) {
        if (!graph.containsKey(person) || visited.contains(person)) {
            return;
        }
        visited.add(person);
        result.add(person);
        for (String neighbor : graph.get(person)) {
            dfs(neighbor, visited, result);
        }
    }

    // Iterative DFS
    public List<String> findSocialCircleIterative(String person) {
        Set<String> visited = new HashSet<>();
        List<String> result = new ArrayList<>();
        Stack<String> stack = new Stack<>();

        if (!graph.containsKey(person)) return result;

        stack.push(person);

        while (!stack.isEmpty()) {
            String current = stack.pop();
            if (!visited.contains(current)) {
                visited.add(current);
                result.add(current);
                for (String neighbor : graph.get(current)) {
                    if (!visited.contains(neighbor)) {
                        stack.push(neighbor);
                    }
                }
            }
        }

        return result;
    }

    // For testing
    public static void main(String[] args) {
        SocialNetwork sn = new SocialNetwork();

        // Building the social graph
        sn.addConnection("Anu", "Bhanu");
        sn.addConnection("Bhanu", "Chaitra");
        sn.addConnection("Devika", "Hema");
        sn.addConnection("Hema", "Janu");

        // Find social circle for Anu (recursive)
        System.out.println("Recursive DFS (Anu): " + sn.findSocialCircle("Anu"));

        // Find social circle for Hema (iterative)
        System.out.println("Iterative DFS (Hema): " + sn.findSocialCircleIterative("Hema"));

        // Disconnected person
        sn.addConnection("Manu", "Manu"); // isolated person
        System.out.println("Recursive DFS (Manu): " + sn.findSocialCircle("Manu"));
    }
}
